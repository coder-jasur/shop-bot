import logging
from typing import Any

import asyncpg
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery

from src.app.keyboards import inline_keyboard_creator
from src.app.keyboards.inline import quit_to_admin_menu
from src.app.services.broadcaster import Broadcaster
from src.app.states.admin import BroadcastingManagerSG

logger = logging.getLogger(__name__)

broadcater_router = Router()

@broadcater_router.callback_query(F.data == "mailing")
async def start_broadcasting_manager(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup=quit_to_admin_menu
    )
    await state.set_state(BroadcastingManagerSG.get_message)


@broadcater_router.message(BroadcastingManagerSG.get_message)
async def get_broadcasting_message(message: Message, state: FSMContext, **kwargs):
    if message.poll:
        await message.delete()
        return await message.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!"
        )

    album = kwargs.get("album")
    if album:
        await state.update_data(album=album)
    else:
        await state.update_data(message=message)

    await state.set_state(BroadcastingManagerSG.confirm_broadcasting)
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast:cancel"),
                    InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="broadcast:confirm"),
                ]
            ]
        )
    )


@broadcater_router.callback_query(BroadcastingManagerSG.confirm_broadcasting, F.data == "broadcast:cancel")
async def on_cancel_broadcast(call: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@broadcater_router.callback_query(BroadcastingManagerSG.confirm_broadcasting, F.data == "broadcast:confirm")
async def on_confirm_broadcast(call: CallbackQuery, state: FSMContext, db_pool: asyncpg.Connection, bot: Bot) -> Any:
    try:
        data = await state.get_data()
        print(data)
        message = data.get("message")
        album = data.get("album")

        if not album and not message:
            raise ValueError("Broadcasting message not present!")

        await call.message.answer("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        broadcaster = Broadcaster(
            bot=bot,
            conn=db_pool,
            admin_id=call.from_user.id,
            broadcasting_message=message,
            album=album,
            batch_size=5000  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞—á–∫–∏
        )

        # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
        count_blocked, count_deleted, count_limited, count_deactivated = await broadcaster.broadcast()

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏
        result_message = "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."

        if count_blocked:
            result_message += (
                f"\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {count_blocked} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞."
            )

        if count_deleted:
            result_message += (
                f"\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {count_deleted} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã."
            )

        if count_limited:
            result_message += (
                f"\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {count_limited} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã —Ç–≥."
            )

        if count_deactivated:
            result_message += (
                f"\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {count_deleted} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã."
            )

        if not count_blocked and not count_deleted and not count_limited and not count_deactivated:
            result_message += "\n–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ."

        await call.message.edit_text(
            result_message,
            reply_markup=inline_keyboard_creator(["back_to_admin_menu"], ["üîô–ú–µ–Ω—é"])
        )

    except ValueError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ Broadcaster
        return await call.message.answer(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        return await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
